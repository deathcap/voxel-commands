// Generated by CoffeeScript 1.6.3
(function() {
  var CommandsPlugin, ItemPile, shellwords,
    __slice = [].slice;

  shellwords = require('shellwords');

  ItemPile = require('itempile');

  module.exports = function(game, opts) {
    return new CommandsPlugin(game, opts);
  };

  module.exports.pluginInfo = {
    loadAfter: ['voxel-console']
  };

  CommandsPlugin = (function() {
    function CommandsPlugin(game, opts) {
      var _ref, _ref1;
      this.game = game;
      this.console = (_ref = this.game.plugins) != null ? _ref.get('voxel-console') : void 0;
      if (this.console == null) {
        throw 'voxel-commands requires voxel-console';
      }
      this.registry = (_ref1 = this.game.plugins) != null ? _ref1.get('voxel-registry') : void 0;
      if (this.registry == null) {
        throw 'voxel-commands requires voxel-registry';
      }
      this.handlers = {
        undefined: function() {
          var args, command;
          command = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          return this.console.log("Invalid command " + command + " " + (args.join(' ')));
        },
        help: function() {
          this.console.log("Available commands:");
          this.console.log(".pos x y z");
          this.console.log(".item name [count [tags]]");
          return this.console.log(".block name [data]");
        },
        pos: function(x, y, z) {
          var player, _ref2;
          player = (_ref2 = this.game.plugins) != null ? _ref2.get('voxel-player') : void 0;
          if (player) {
            player.moveTo(x, y, z);
            return this.console.log([player.position.x, player.position.y, player.position.z]);
          }
        },
        item: function(name, count, tags) {
          var carry, pile, props, _ref2;
          props = this.registry.getItemProps(name);
          if (props == null) {
            this.console.log("No such item: " + name);
            return;
          }
          if (count == null) {
            count = 1;
          }
          if (tags == null) {
            tags = void 0;
          }
          pile = new ItemPile(name, count, tags);
          carry = (_ref2 = this.game.plugins) != null ? _ref2.get('voxel-carry') : void 0;
          if (carry) {
            carry.inventory.give(pile);
            if (tags == null) {
              tags = '';
            }
            return this.console.log("Gave " + name + " x " + count + " " + tags);
          }
        },
        block: function(name, data) {
          var blockdata, dataInfo, hit, index, oldData, oldIndex, oldName, reachDistance, x, y, z, _ref2, _ref3;
          index = this.registry.getBlockIndex(name);
          if (index == null) {
            this.console.log("No such block: " + name);
            return;
          }
          reachDistance = 8;
          hit = this.game.raycastVoxels(this.game.cameraPosition(), this.game.cameraVector(), reachDistance);
          if (!hit) {
            this.console.log("No block targetted");
            return;
          }
          _ref2 = hit.voxel, x = _ref2[0], y = _ref2[1], z = _ref2[2];
          oldIndex = this.game.getBlock(oldIndex);
          oldName = this.registry.getBlockName(oldIndex);
          this.game.setBlock(hit, index);
          blockdata = (_ref3 = this.game.plugins) != null ? _ref3.get('voxel-blockdata') : void 0;
          if (blockdata != null) {
            oldData = blockdata.get(x, y, z);
            if (data != null) {
              blockdata.set(x, y, z, data);
            }
          }
          dataInfo = "";
          if (oldData != null) {
            dataInfo = "" + oldData + " -> ";
          }
          if (data == null) {
            data = oldData;
          }
          if (oldData != null) {
            dataInfo += data;
          }
          return this.console.log("Set (" + x + ", " + y + ", " + z + ") " + oldName + "/" + oldIndex + " -> " + name + "/" + index + "  " + dataInfo);
        }
      };
      this.handlers.p = this.handlers.position = this.handlers.pos;
      this.handlers.i = this.handlers.give = this.handlers.item;
      this.handlers.b = this.handlers.setblock = this.handlers.set = this.handlers.block;
      this.enable();
    }

    CommandsPlugin.prototype.process = function(input) {
      var args, command, handler, words;
      if (input.indexOf('.') !== 0) {
        this.console.log(input);
        this.console.log('Type .help for commands');
        return;
      }
      input = input.substring(1);
      words = shellwords.split(input);
      command = words[0], args = 2 <= words.length ? __slice.call(words, 1) : [];
      handler = this.handlers[command];
      if (handler == null) {
        handler = this.handlers.undefined;
        args.unshift(command);
      }
      return handler.apply(this, args);
    };

    CommandsPlugin.prototype.enable = function() {
      var _this = this;
      return this.console.widget.on('input', this.onInput = function(input) {
        return _this.process(input);
      });
    };

    CommandsPlugin.prototype.disable = function() {
      return this.console.widget.removeListener('input', this.onInput);
    };

    return CommandsPlugin;

  })();

}).call(this);
